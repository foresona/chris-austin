# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  post(relativePath: String): Post!
  postConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PostFilter): PostConnection!
  testimonial(relativePath: String): Testimonial!
  testimonialConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: TestimonialFilter): TestimonialConnection!
  page(relativePath: String): Page!
  pageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PageFilter): PageConnection!
}

input DocumentFilter {
  post: PostFilter
  testimonial: TestimonialFilter
  page: PageFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Post | Testimonial | Page | Folder

type Post implements Node & Document {
  title: String!
  excerpt: String!
  date: String!
  coverImage: String
  author: String!
  featured: Boolean
  category: String
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input PostFilter {
  title: StringFilter
  excerpt: StringFilter
  date: DatetimeFilter
  coverImage: ImageFilter
  author: StringFilter
  featured: BooleanFilter
  category: StringFilter
  body: RichTextFilter
}

type PostConnectionEdges {
  cursor: String!
  node: Post
}

type PostConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PostConnectionEdges]
}

type Testimonial implements Node & Document {
  clientName: String!
  clientPosition: String!
  company: String!
  clientImage: String
  companyLogo: String
  testimonial: JSON!
  rating: Float!
  featured: Boolean
  date: String!
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input NumberFilter {
  lt: Float
  lte: Float
  gte: Float
  gt: Float
  eq: Float
  exists: Boolean
  in: [Float]
}

input TestimonialFilter {
  clientName: StringFilter
  clientPosition: StringFilter
  company: StringFilter
  clientImage: ImageFilter
  companyLogo: ImageFilter
  testimonial: RichTextFilter
  rating: NumberFilter
  featured: BooleanFilter
  date: DatetimeFilter
}

type TestimonialConnectionEdges {
  cursor: String!
  node: Testimonial
}

type TestimonialConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [TestimonialConnectionEdges]
}

type PageStats {
  label: String!
  value: String!
  description: String
}

type PageServices {
  title: String!
  description: String!
  icon: String
  color: String
}

type PageProcessSteps {
  number: String!
  title: String!
  description: String!
  icon: String
  color: String
}

type PageFeatures {
  title: String!
  description: String!
  icon: String
  gradient: String
}

type PageLogoCloudClients {
  name: String!
  industry: String!
}

type PageValues {
  title: String!
  description: String!
  icon: String
}

type PageTeam {
  name: String!
  position: String!
  bio: String
  image: String
}

type PageSocialMedia {
  twitter: String
  linkedin: String
  instagram: String
}

type Page implements Node & Document {
  title: String!
  pageTitle: String
  subtitle: String
  description: String
  heroTitle: String
  heroSubtitle: String
  heroDescription: String
  ctaTitle: String
  ctaDescription: String
  ctaButtonText: String
  stats: [PageStats]
  servicesSectionTag: String
  servicesSectionTitle: String
  servicesSectionDescription: String
  services: [PageServices]
  processSectionTag: String
  processSectionTitle: String
  processSectionDescription: String
  processSteps: [PageProcessSteps]
  featuresSectionTag: String
  featuresSectionTitle: String
  featuresSectionDescription: String
  features: [PageFeatures]
  featuresCtaText: String
  featuresButtonText: String
  brandName: String
  logoCloudSectionTag: String
  logoCloudSectionTitle: String
  logoCloudSectionDescription: String
  logoCloudClients: [PageLogoCloudClients]
  logoCloudCtaText: String
  logoCloudButtonText: String
  testimonialsSectionTag: String
  testimonialsSectionTitle: String
  testimonialsSectionDescription: String
  statsBottomText: String
  aboutTitle: String
  aboutDescription: String
  story: String
  mission: String
  values: [PageValues]
  team: [PageTeam]
  contactSectionTitle: String
  contactSectionDescription: String
  email: String
  phone: String
  address: String
  officeHours: String
  socialMedia: PageSocialMedia
  footerBrandName: String
  footerTagline: String
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input PageStatsFilter {
  label: StringFilter
  value: StringFilter
  description: StringFilter
}

input PageServicesFilter {
  title: StringFilter
  description: StringFilter
  icon: StringFilter
  color: StringFilter
}

input PageProcessStepsFilter {
  number: StringFilter
  title: StringFilter
  description: StringFilter
  icon: StringFilter
  color: StringFilter
}

input PageFeaturesFilter {
  title: StringFilter
  description: StringFilter
  icon: StringFilter
  gradient: StringFilter
}

input PageLogoCloudClientsFilter {
  name: StringFilter
  industry: StringFilter
}

input PageValuesFilter {
  title: StringFilter
  description: StringFilter
  icon: StringFilter
}

input PageTeamFilter {
  name: StringFilter
  position: StringFilter
  bio: StringFilter
  image: ImageFilter
}

input PageSocialMediaFilter {
  twitter: StringFilter
  linkedin: StringFilter
  instagram: StringFilter
}

input PageFilter {
  title: StringFilter
  pageTitle: StringFilter
  subtitle: StringFilter
  description: StringFilter
  heroTitle: StringFilter
  heroSubtitle: StringFilter
  heroDescription: StringFilter
  ctaTitle: StringFilter
  ctaDescription: StringFilter
  ctaButtonText: StringFilter
  stats: PageStatsFilter
  servicesSectionTag: StringFilter
  servicesSectionTitle: StringFilter
  servicesSectionDescription: StringFilter
  services: PageServicesFilter
  processSectionTag: StringFilter
  processSectionTitle: StringFilter
  processSectionDescription: StringFilter
  processSteps: PageProcessStepsFilter
  featuresSectionTag: StringFilter
  featuresSectionTitle: StringFilter
  featuresSectionDescription: StringFilter
  features: PageFeaturesFilter
  featuresCtaText: StringFilter
  featuresButtonText: StringFilter
  brandName: StringFilter
  logoCloudSectionTag: StringFilter
  logoCloudSectionTitle: StringFilter
  logoCloudSectionDescription: StringFilter
  logoCloudClients: PageLogoCloudClientsFilter
  logoCloudCtaText: StringFilter
  logoCloudButtonText: StringFilter
  testimonialsSectionTag: StringFilter
  testimonialsSectionTitle: StringFilter
  testimonialsSectionDescription: StringFilter
  statsBottomText: StringFilter
  aboutTitle: StringFilter
  aboutDescription: StringFilter
  story: StringFilter
  mission: StringFilter
  values: PageValuesFilter
  team: PageTeamFilter
  contactSectionTitle: StringFilter
  contactSectionDescription: StringFilter
  email: StringFilter
  phone: StringFilter
  address: StringFilter
  officeHours: StringFilter
  socialMedia: PageSocialMediaFilter
  footerBrandName: StringFilter
  footerTagline: StringFilter
  body: RichTextFilter
}

type PageConnectionEdges {
  cursor: String!
  node: Page
}

type PageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PageConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updatePost(relativePath: String!, params: PostMutation!): Post!
  createPost(relativePath: String!, params: PostMutation!): Post!
  updateTestimonial(relativePath: String!, params: TestimonialMutation!): Testimonial!
  createTestimonial(relativePath: String!, params: TestimonialMutation!): Testimonial!
  updatePage(relativePath: String!, params: PageMutation!): Page!
  createPage(relativePath: String!, params: PageMutation!): Page!
}

input DocumentUpdateMutation {
  post: PostMutation
  testimonial: TestimonialMutation
  page: PageMutation
  relativePath: String
}

input DocumentMutation {
  post: PostMutation
  testimonial: TestimonialMutation
  page: PageMutation
}

input PostMutation {
  title: String
  excerpt: String
  date: String
  coverImage: String
  author: String
  featured: Boolean
  category: String
  body: JSON
}

input TestimonialMutation {
  clientName: String
  clientPosition: String
  company: String
  clientImage: String
  companyLogo: String
  testimonial: JSON
  rating: Float
  featured: Boolean
  date: String
}

input PageStatsMutation {
  label: String
  value: String
  description: String
}

input PageServicesMutation {
  title: String
  description: String
  icon: String
  color: String
}

input PageProcessStepsMutation {
  number: String
  title: String
  description: String
  icon: String
  color: String
}

input PageFeaturesMutation {
  title: String
  description: String
  icon: String
  gradient: String
}

input PageLogoCloudClientsMutation {
  name: String
  industry: String
}

input PageValuesMutation {
  title: String
  description: String
  icon: String
}

input PageTeamMutation {
  name: String
  position: String
  bio: String
  image: String
}

input PageSocialMediaMutation {
  twitter: String
  linkedin: String
  instagram: String
}

input PageMutation {
  title: String
  pageTitle: String
  subtitle: String
  description: String
  heroTitle: String
  heroSubtitle: String
  heroDescription: String
  ctaTitle: String
  ctaDescription: String
  ctaButtonText: String
  stats: [PageStatsMutation]
  servicesSectionTag: String
  servicesSectionTitle: String
  servicesSectionDescription: String
  services: [PageServicesMutation]
  processSectionTag: String
  processSectionTitle: String
  processSectionDescription: String
  processSteps: [PageProcessStepsMutation]
  featuresSectionTag: String
  featuresSectionTitle: String
  featuresSectionDescription: String
  features: [PageFeaturesMutation]
  featuresCtaText: String
  featuresButtonText: String
  brandName: String
  logoCloudSectionTag: String
  logoCloudSectionTitle: String
  logoCloudSectionDescription: String
  logoCloudClients: [PageLogoCloudClientsMutation]
  logoCloudCtaText: String
  logoCloudButtonText: String
  testimonialsSectionTag: String
  testimonialsSectionTitle: String
  testimonialsSectionDescription: String
  statsBottomText: String
  aboutTitle: String
  aboutDescription: String
  story: String
  mission: String
  values: [PageValuesMutation]
  team: [PageTeamMutation]
  contactSectionTitle: String
  contactSectionDescription: String
  email: String
  phone: String
  address: String
  officeHours: String
  socialMedia: PageSocialMediaMutation
  footerBrandName: String
  footerTagline: String
  body: JSON
}

schema {
  query: Query
  mutation: Mutation
}
