//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** References another document, used as a foreign key */
  Reference: { input: any; output: any; }
  JSON: { input: any; output: any; }
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String']['output'];
  title?: Maybe<Scalars['String']['output']>;
  basename: Scalars['String']['output'];
  hasReferences?: Maybe<Scalars['Boolean']['output']>;
  breadcrumbs: Array<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  relativePath: Scalars['String']['output'];
  extension: Scalars['String']['output'];
  template: Scalars['String']['output'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Folder = {
  __typename?: 'Folder';
  name: Scalars['String']['output'];
  path: Scalars['String']['output'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean']['output'];
  hasNextPage: Scalars['Boolean']['output'];
  startCursor: Scalars['String']['output'];
  endCursor: Scalars['String']['output'];
};

export type Node = {
  id: Scalars['ID']['output'];
};

export type Document = {
  id: Scalars['ID']['output'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON']['output'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float']['output'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']['output']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  post: Post;
  postConnection: PostConnection;
  testimonial: Testimonial;
  testimonialConnection: TestimonialConnection;
  page: Page;
  pageConnection: PageConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String']['input'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']['input']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPostArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPostConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PostFilter>;
};


export type QueryTestimonialArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryTestimonialConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<TestimonialFilter>;
};


export type QueryPageArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPageConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PageFilter>;
};

export type DocumentFilter = {
  post?: InputMaybe<PostFilter>;
  testimonial?: InputMaybe<TestimonialFilter>;
  page?: InputMaybe<PageFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  format?: Maybe<Scalars['String']['output']>;
  matches?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentNode = Post | Testimonial | Page | Folder;

export type Post = Node & Document & {
  __typename?: 'Post';
  title: Scalars['String']['output'];
  excerpt: Scalars['String']['output'];
  date: Scalars['String']['output'];
  coverImage?: Maybe<Scalars['String']['output']>;
  author: Scalars['String']['output'];
  featured?: Maybe<Scalars['Boolean']['output']>;
  category?: Maybe<Scalars['String']['output']>;
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type DatetimeFilter = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type ImageFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type BooleanFilter = {
  eq?: InputMaybe<Scalars['Boolean']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type RichTextFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type PostFilter = {
  title?: InputMaybe<StringFilter>;
  excerpt?: InputMaybe<StringFilter>;
  date?: InputMaybe<DatetimeFilter>;
  coverImage?: InputMaybe<ImageFilter>;
  author?: InputMaybe<StringFilter>;
  featured?: InputMaybe<BooleanFilter>;
  category?: InputMaybe<StringFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type PostConnectionEdges = {
  __typename?: 'PostConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Post>;
};

export type PostConnection = Connection & {
  __typename?: 'PostConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<PostConnectionEdges>>>;
};

export type Testimonial = Node & Document & {
  __typename?: 'Testimonial';
  clientName: Scalars['String']['output'];
  clientPosition: Scalars['String']['output'];
  company: Scalars['String']['output'];
  clientImage?: Maybe<Scalars['String']['output']>;
  companyLogo?: Maybe<Scalars['String']['output']>;
  testimonial: Scalars['JSON']['output'];
  rating: Scalars['Float']['output'];
  featured?: Maybe<Scalars['Boolean']['output']>;
  date: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type NumberFilter = {
  lt?: InputMaybe<Scalars['Float']['input']>;
  lte?: InputMaybe<Scalars['Float']['input']>;
  gte?: InputMaybe<Scalars['Float']['input']>;
  gt?: InputMaybe<Scalars['Float']['input']>;
  eq?: InputMaybe<Scalars['Float']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['Float']['input']>>>;
};

export type TestimonialFilter = {
  clientName?: InputMaybe<StringFilter>;
  clientPosition?: InputMaybe<StringFilter>;
  company?: InputMaybe<StringFilter>;
  clientImage?: InputMaybe<ImageFilter>;
  companyLogo?: InputMaybe<ImageFilter>;
  testimonial?: InputMaybe<RichTextFilter>;
  rating?: InputMaybe<NumberFilter>;
  featured?: InputMaybe<BooleanFilter>;
  date?: InputMaybe<DatetimeFilter>;
};

export type TestimonialConnectionEdges = {
  __typename?: 'TestimonialConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Testimonial>;
};

export type TestimonialConnection = Connection & {
  __typename?: 'TestimonialConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<TestimonialConnectionEdges>>>;
};

export type PageStats = {
  __typename?: 'PageStats';
  label: Scalars['String']['output'];
  value: Scalars['String']['output'];
  description?: Maybe<Scalars['String']['output']>;
};

export type PageServices = {
  __typename?: 'PageServices';
  title: Scalars['String']['output'];
  description: Scalars['String']['output'];
  icon?: Maybe<Scalars['String']['output']>;
  color?: Maybe<Scalars['String']['output']>;
};

export type PageProcessSteps = {
  __typename?: 'PageProcessSteps';
  number: Scalars['String']['output'];
  title: Scalars['String']['output'];
  description: Scalars['String']['output'];
  icon?: Maybe<Scalars['String']['output']>;
  color?: Maybe<Scalars['String']['output']>;
};

export type PageFeatures = {
  __typename?: 'PageFeatures';
  title: Scalars['String']['output'];
  description: Scalars['String']['output'];
  icon?: Maybe<Scalars['String']['output']>;
  gradient?: Maybe<Scalars['String']['output']>;
};

export type PageValues = {
  __typename?: 'PageValues';
  title: Scalars['String']['output'];
  description: Scalars['String']['output'];
  icon?: Maybe<Scalars['String']['output']>;
};

export type PageTeam = {
  __typename?: 'PageTeam';
  name: Scalars['String']['output'];
  position: Scalars['String']['output'];
  bio?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
};

export type PageSocialMedia = {
  __typename?: 'PageSocialMedia';
  twitter?: Maybe<Scalars['String']['output']>;
  linkedin?: Maybe<Scalars['String']['output']>;
  instagram?: Maybe<Scalars['String']['output']>;
};

export type Page = Node & Document & {
  __typename?: 'Page';
  title: Scalars['String']['output'];
  pageTitle?: Maybe<Scalars['String']['output']>;
  subtitle?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  heroTitle?: Maybe<Scalars['String']['output']>;
  heroSubtitle?: Maybe<Scalars['String']['output']>;
  heroDescription?: Maybe<Scalars['String']['output']>;
  ctaTitle?: Maybe<Scalars['String']['output']>;
  ctaDescription?: Maybe<Scalars['String']['output']>;
  ctaButtonText?: Maybe<Scalars['String']['output']>;
  stats?: Maybe<Array<Maybe<PageStats>>>;
  servicesSectionTag?: Maybe<Scalars['String']['output']>;
  servicesSectionTitle?: Maybe<Scalars['String']['output']>;
  servicesSectionDescription?: Maybe<Scalars['String']['output']>;
  services?: Maybe<Array<Maybe<PageServices>>>;
  processSectionTag?: Maybe<Scalars['String']['output']>;
  processSectionTitle?: Maybe<Scalars['String']['output']>;
  processSectionDescription?: Maybe<Scalars['String']['output']>;
  processSteps?: Maybe<Array<Maybe<PageProcessSteps>>>;
  featuresSectionTag?: Maybe<Scalars['String']['output']>;
  featuresSectionTitle?: Maybe<Scalars['String']['output']>;
  featuresSectionDescription?: Maybe<Scalars['String']['output']>;
  features?: Maybe<Array<Maybe<PageFeatures>>>;
  aboutTitle?: Maybe<Scalars['String']['output']>;
  aboutDescription?: Maybe<Scalars['String']['output']>;
  story?: Maybe<Scalars['String']['output']>;
  mission?: Maybe<Scalars['String']['output']>;
  values?: Maybe<Array<Maybe<PageValues>>>;
  team?: Maybe<Array<Maybe<PageTeam>>>;
  contactSectionTitle?: Maybe<Scalars['String']['output']>;
  contactSectionDescription?: Maybe<Scalars['String']['output']>;
  email?: Maybe<Scalars['String']['output']>;
  phone?: Maybe<Scalars['String']['output']>;
  address?: Maybe<Scalars['String']['output']>;
  officeHours?: Maybe<Scalars['String']['output']>;
  socialMedia?: Maybe<PageSocialMedia>;
  footerBrandName?: Maybe<Scalars['String']['output']>;
  footerTagline?: Maybe<Scalars['String']['output']>;
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type PageStatsFilter = {
  label?: InputMaybe<StringFilter>;
  value?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
};

export type PageServicesFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  icon?: InputMaybe<StringFilter>;
  color?: InputMaybe<StringFilter>;
};

export type PageProcessStepsFilter = {
  number?: InputMaybe<StringFilter>;
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  icon?: InputMaybe<StringFilter>;
  color?: InputMaybe<StringFilter>;
};

export type PageFeaturesFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  icon?: InputMaybe<StringFilter>;
  gradient?: InputMaybe<StringFilter>;
};

export type PageValuesFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  icon?: InputMaybe<StringFilter>;
};

export type PageTeamFilter = {
  name?: InputMaybe<StringFilter>;
  position?: InputMaybe<StringFilter>;
  bio?: InputMaybe<StringFilter>;
  image?: InputMaybe<ImageFilter>;
};

export type PageSocialMediaFilter = {
  twitter?: InputMaybe<StringFilter>;
  linkedin?: InputMaybe<StringFilter>;
  instagram?: InputMaybe<StringFilter>;
};

export type PageFilter = {
  title?: InputMaybe<StringFilter>;
  pageTitle?: InputMaybe<StringFilter>;
  subtitle?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  heroTitle?: InputMaybe<StringFilter>;
  heroSubtitle?: InputMaybe<StringFilter>;
  heroDescription?: InputMaybe<StringFilter>;
  ctaTitle?: InputMaybe<StringFilter>;
  ctaDescription?: InputMaybe<StringFilter>;
  ctaButtonText?: InputMaybe<StringFilter>;
  stats?: InputMaybe<PageStatsFilter>;
  servicesSectionTag?: InputMaybe<StringFilter>;
  servicesSectionTitle?: InputMaybe<StringFilter>;
  servicesSectionDescription?: InputMaybe<StringFilter>;
  services?: InputMaybe<PageServicesFilter>;
  processSectionTag?: InputMaybe<StringFilter>;
  processSectionTitle?: InputMaybe<StringFilter>;
  processSectionDescription?: InputMaybe<StringFilter>;
  processSteps?: InputMaybe<PageProcessStepsFilter>;
  featuresSectionTag?: InputMaybe<StringFilter>;
  featuresSectionTitle?: InputMaybe<StringFilter>;
  featuresSectionDescription?: InputMaybe<StringFilter>;
  features?: InputMaybe<PageFeaturesFilter>;
  aboutTitle?: InputMaybe<StringFilter>;
  aboutDescription?: InputMaybe<StringFilter>;
  story?: InputMaybe<StringFilter>;
  mission?: InputMaybe<StringFilter>;
  values?: InputMaybe<PageValuesFilter>;
  team?: InputMaybe<PageTeamFilter>;
  contactSectionTitle?: InputMaybe<StringFilter>;
  contactSectionDescription?: InputMaybe<StringFilter>;
  email?: InputMaybe<StringFilter>;
  phone?: InputMaybe<StringFilter>;
  address?: InputMaybe<StringFilter>;
  officeHours?: InputMaybe<StringFilter>;
  socialMedia?: InputMaybe<PageSocialMediaFilter>;
  footerBrandName?: InputMaybe<StringFilter>;
  footerTagline?: InputMaybe<StringFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type PageConnectionEdges = {
  __typename?: 'PageConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Page>;
};

export type PageConnection = Connection & {
  __typename?: 'PageConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<PageConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  createFolder: DocumentNode;
  updatePost: Post;
  createPost: Post;
  updateTestimonial: Testimonial;
  createTestimonial: Testimonial;
  updatePage: Page;
  createPage: Page;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String']['input'];
  relativePath: Scalars['String']['input'];
  template?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentMutation;
};


export type MutationCreateFolderArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationUpdatePostArgs = {
  relativePath: Scalars['String']['input'];
  params: PostMutation;
};


export type MutationCreatePostArgs = {
  relativePath: Scalars['String']['input'];
  params: PostMutation;
};


export type MutationUpdateTestimonialArgs = {
  relativePath: Scalars['String']['input'];
  params: TestimonialMutation;
};


export type MutationCreateTestimonialArgs = {
  relativePath: Scalars['String']['input'];
  params: TestimonialMutation;
};


export type MutationUpdatePageArgs = {
  relativePath: Scalars['String']['input'];
  params: PageMutation;
};


export type MutationCreatePageArgs = {
  relativePath: Scalars['String']['input'];
  params: PageMutation;
};

export type DocumentUpdateMutation = {
  post?: InputMaybe<PostMutation>;
  testimonial?: InputMaybe<TestimonialMutation>;
  page?: InputMaybe<PageMutation>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentMutation = {
  post?: InputMaybe<PostMutation>;
  testimonial?: InputMaybe<TestimonialMutation>;
  page?: InputMaybe<PageMutation>;
};

export type PostMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  excerpt?: InputMaybe<Scalars['String']['input']>;
  date?: InputMaybe<Scalars['String']['input']>;
  coverImage?: InputMaybe<Scalars['String']['input']>;
  author?: InputMaybe<Scalars['String']['input']>;
  featured?: InputMaybe<Scalars['Boolean']['input']>;
  category?: InputMaybe<Scalars['String']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type TestimonialMutation = {
  clientName?: InputMaybe<Scalars['String']['input']>;
  clientPosition?: InputMaybe<Scalars['String']['input']>;
  company?: InputMaybe<Scalars['String']['input']>;
  clientImage?: InputMaybe<Scalars['String']['input']>;
  companyLogo?: InputMaybe<Scalars['String']['input']>;
  testimonial?: InputMaybe<Scalars['JSON']['input']>;
  rating?: InputMaybe<Scalars['Float']['input']>;
  featured?: InputMaybe<Scalars['Boolean']['input']>;
  date?: InputMaybe<Scalars['String']['input']>;
};

export type PageStatsMutation = {
  label?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
};

export type PageServicesMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  icon?: InputMaybe<Scalars['String']['input']>;
  color?: InputMaybe<Scalars['String']['input']>;
};

export type PageProcessStepsMutation = {
  number?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  icon?: InputMaybe<Scalars['String']['input']>;
  color?: InputMaybe<Scalars['String']['input']>;
};

export type PageFeaturesMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  icon?: InputMaybe<Scalars['String']['input']>;
  gradient?: InputMaybe<Scalars['String']['input']>;
};

export type PageValuesMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  icon?: InputMaybe<Scalars['String']['input']>;
};

export type PageTeamMutation = {
  name?: InputMaybe<Scalars['String']['input']>;
  position?: InputMaybe<Scalars['String']['input']>;
  bio?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
};

export type PageSocialMediaMutation = {
  twitter?: InputMaybe<Scalars['String']['input']>;
  linkedin?: InputMaybe<Scalars['String']['input']>;
  instagram?: InputMaybe<Scalars['String']['input']>;
};

export type PageMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  pageTitle?: InputMaybe<Scalars['String']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  heroTitle?: InputMaybe<Scalars['String']['input']>;
  heroSubtitle?: InputMaybe<Scalars['String']['input']>;
  heroDescription?: InputMaybe<Scalars['String']['input']>;
  ctaTitle?: InputMaybe<Scalars['String']['input']>;
  ctaDescription?: InputMaybe<Scalars['String']['input']>;
  ctaButtonText?: InputMaybe<Scalars['String']['input']>;
  stats?: InputMaybe<Array<InputMaybe<PageStatsMutation>>>;
  servicesSectionTag?: InputMaybe<Scalars['String']['input']>;
  servicesSectionTitle?: InputMaybe<Scalars['String']['input']>;
  servicesSectionDescription?: InputMaybe<Scalars['String']['input']>;
  services?: InputMaybe<Array<InputMaybe<PageServicesMutation>>>;
  processSectionTag?: InputMaybe<Scalars['String']['input']>;
  processSectionTitle?: InputMaybe<Scalars['String']['input']>;
  processSectionDescription?: InputMaybe<Scalars['String']['input']>;
  processSteps?: InputMaybe<Array<InputMaybe<PageProcessStepsMutation>>>;
  featuresSectionTag?: InputMaybe<Scalars['String']['input']>;
  featuresSectionTitle?: InputMaybe<Scalars['String']['input']>;
  featuresSectionDescription?: InputMaybe<Scalars['String']['input']>;
  features?: InputMaybe<Array<InputMaybe<PageFeaturesMutation>>>;
  aboutTitle?: InputMaybe<Scalars['String']['input']>;
  aboutDescription?: InputMaybe<Scalars['String']['input']>;
  story?: InputMaybe<Scalars['String']['input']>;
  mission?: InputMaybe<Scalars['String']['input']>;
  values?: InputMaybe<Array<InputMaybe<PageValuesMutation>>>;
  team?: InputMaybe<Array<InputMaybe<PageTeamMutation>>>;
  contactSectionTitle?: InputMaybe<Scalars['String']['input']>;
  contactSectionDescription?: InputMaybe<Scalars['String']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  phone?: InputMaybe<Scalars['String']['input']>;
  address?: InputMaybe<Scalars['String']['input']>;
  officeHours?: InputMaybe<Scalars['String']['input']>;
  socialMedia?: InputMaybe<PageSocialMediaMutation>;
  footerBrandName?: InputMaybe<Scalars['String']['input']>;
  footerTagline?: InputMaybe<Scalars['String']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type PostPartsFragment = { __typename: 'Post', title: string, excerpt: string, date: string, coverImage?: string | null, author: string, featured?: boolean | null, category?: string | null, body?: any | null };

export type TestimonialPartsFragment = { __typename: 'Testimonial', clientName: string, clientPosition: string, company: string, clientImage?: string | null, companyLogo?: string | null, testimonial: any, rating: number, featured?: boolean | null, date: string };

export type PagePartsFragment = { __typename: 'Page', title: string, pageTitle?: string | null, subtitle?: string | null, description?: string | null, heroTitle?: string | null, heroSubtitle?: string | null, heroDescription?: string | null, ctaTitle?: string | null, ctaDescription?: string | null, ctaButtonText?: string | null, servicesSectionTag?: string | null, servicesSectionTitle?: string | null, servicesSectionDescription?: string | null, processSectionTag?: string | null, processSectionTitle?: string | null, processSectionDescription?: string | null, featuresSectionTag?: string | null, featuresSectionTitle?: string | null, featuresSectionDescription?: string | null, aboutTitle?: string | null, aboutDescription?: string | null, story?: string | null, mission?: string | null, contactSectionTitle?: string | null, contactSectionDescription?: string | null, email?: string | null, phone?: string | null, address?: string | null, officeHours?: string | null, footerBrandName?: string | null, footerTagline?: string | null, body?: any | null, stats?: Array<{ __typename: 'PageStats', label: string, value: string, description?: string | null } | null> | null, services?: Array<{ __typename: 'PageServices', title: string, description: string, icon?: string | null, color?: string | null } | null> | null, processSteps?: Array<{ __typename: 'PageProcessSteps', number: string, title: string, description: string, icon?: string | null, color?: string | null } | null> | null, features?: Array<{ __typename: 'PageFeatures', title: string, description: string, icon?: string | null, gradient?: string | null } | null> | null, values?: Array<{ __typename: 'PageValues', title: string, description: string, icon?: string | null } | null> | null, team?: Array<{ __typename: 'PageTeam', name: string, position: string, bio?: string | null, image?: string | null } | null> | null, socialMedia?: { __typename: 'PageSocialMedia', twitter?: string | null, linkedin?: string | null, instagram?: string | null } | null };

export type PostQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type PostQuery = { __typename?: 'Query', post: { __typename: 'Post', id: string, title: string, excerpt: string, date: string, coverImage?: string | null, author: string, featured?: boolean | null, category?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type PostConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PostFilter>;
}>;


export type PostConnectionQuery = { __typename?: 'Query', postConnection: { __typename?: 'PostConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'PostConnectionEdges', cursor: string, node?: { __typename: 'Post', id: string, title: string, excerpt: string, date: string, coverImage?: string | null, author: string, featured?: boolean | null, category?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type TestimonialQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type TestimonialQuery = { __typename?: 'Query', testimonial: { __typename: 'Testimonial', id: string, clientName: string, clientPosition: string, company: string, clientImage?: string | null, companyLogo?: string | null, testimonial: any, rating: number, featured?: boolean | null, date: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type TestimonialConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<TestimonialFilter>;
}>;


export type TestimonialConnectionQuery = { __typename?: 'Query', testimonialConnection: { __typename?: 'TestimonialConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'TestimonialConnectionEdges', cursor: string, node?: { __typename: 'Testimonial', id: string, clientName: string, clientPosition: string, company: string, clientImage?: string | null, companyLogo?: string | null, testimonial: any, rating: number, featured?: boolean | null, date: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type PageQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type PageQuery = { __typename?: 'Query', page: { __typename: 'Page', id: string, title: string, pageTitle?: string | null, subtitle?: string | null, description?: string | null, heroTitle?: string | null, heroSubtitle?: string | null, heroDescription?: string | null, ctaTitle?: string | null, ctaDescription?: string | null, ctaButtonText?: string | null, servicesSectionTag?: string | null, servicesSectionTitle?: string | null, servicesSectionDescription?: string | null, processSectionTag?: string | null, processSectionTitle?: string | null, processSectionDescription?: string | null, featuresSectionTag?: string | null, featuresSectionTitle?: string | null, featuresSectionDescription?: string | null, aboutTitle?: string | null, aboutDescription?: string | null, story?: string | null, mission?: string | null, contactSectionTitle?: string | null, contactSectionDescription?: string | null, email?: string | null, phone?: string | null, address?: string | null, officeHours?: string | null, footerBrandName?: string | null, footerTagline?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, stats?: Array<{ __typename: 'PageStats', label: string, value: string, description?: string | null } | null> | null, services?: Array<{ __typename: 'PageServices', title: string, description: string, icon?: string | null, color?: string | null } | null> | null, processSteps?: Array<{ __typename: 'PageProcessSteps', number: string, title: string, description: string, icon?: string | null, color?: string | null } | null> | null, features?: Array<{ __typename: 'PageFeatures', title: string, description: string, icon?: string | null, gradient?: string | null } | null> | null, values?: Array<{ __typename: 'PageValues', title: string, description: string, icon?: string | null } | null> | null, team?: Array<{ __typename: 'PageTeam', name: string, position: string, bio?: string | null, image?: string | null } | null> | null, socialMedia?: { __typename: 'PageSocialMedia', twitter?: string | null, linkedin?: string | null, instagram?: string | null } | null } };

export type PageConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PageFilter>;
}>;


export type PageConnectionQuery = { __typename?: 'Query', pageConnection: { __typename?: 'PageConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'PageConnectionEdges', cursor: string, node?: { __typename: 'Page', id: string, title: string, pageTitle?: string | null, subtitle?: string | null, description?: string | null, heroTitle?: string | null, heroSubtitle?: string | null, heroDescription?: string | null, ctaTitle?: string | null, ctaDescription?: string | null, ctaButtonText?: string | null, servicesSectionTag?: string | null, servicesSectionTitle?: string | null, servicesSectionDescription?: string | null, processSectionTag?: string | null, processSectionTitle?: string | null, processSectionDescription?: string | null, featuresSectionTag?: string | null, featuresSectionTitle?: string | null, featuresSectionDescription?: string | null, aboutTitle?: string | null, aboutDescription?: string | null, story?: string | null, mission?: string | null, contactSectionTitle?: string | null, contactSectionDescription?: string | null, email?: string | null, phone?: string | null, address?: string | null, officeHours?: string | null, footerBrandName?: string | null, footerTagline?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, stats?: Array<{ __typename: 'PageStats', label: string, value: string, description?: string | null } | null> | null, services?: Array<{ __typename: 'PageServices', title: string, description: string, icon?: string | null, color?: string | null } | null> | null, processSteps?: Array<{ __typename: 'PageProcessSteps', number: string, title: string, description: string, icon?: string | null, color?: string | null } | null> | null, features?: Array<{ __typename: 'PageFeatures', title: string, description: string, icon?: string | null, gradient?: string | null } | null> | null, values?: Array<{ __typename: 'PageValues', title: string, description: string, icon?: string | null } | null> | null, team?: Array<{ __typename: 'PageTeam', name: string, position: string, bio?: string | null, image?: string | null } | null> | null, socialMedia?: { __typename: 'PageSocialMedia', twitter?: string | null, linkedin?: string | null, instagram?: string | null } | null } | null } | null> | null } };

export const PostPartsFragmentDoc = gql`
    fragment PostParts on Post {
  __typename
  title
  excerpt
  date
  coverImage
  author
  featured
  category
  body
}
    `;
export const TestimonialPartsFragmentDoc = gql`
    fragment TestimonialParts on Testimonial {
  __typename
  clientName
  clientPosition
  company
  clientImage
  companyLogo
  testimonial
  rating
  featured
  date
}
    `;
export const PagePartsFragmentDoc = gql`
    fragment PageParts on Page {
  __typename
  title
  pageTitle
  subtitle
  description
  heroTitle
  heroSubtitle
  heroDescription
  ctaTitle
  ctaDescription
  ctaButtonText
  stats {
    __typename
    label
    value
    description
  }
  servicesSectionTag
  servicesSectionTitle
  servicesSectionDescription
  services {
    __typename
    title
    description
    icon
    color
  }
  processSectionTag
  processSectionTitle
  processSectionDescription
  processSteps {
    __typename
    number
    title
    description
    icon
    color
  }
  featuresSectionTag
  featuresSectionTitle
  featuresSectionDescription
  features {
    __typename
    title
    description
    icon
    gradient
  }
  aboutTitle
  aboutDescription
  story
  mission
  values {
    __typename
    title
    description
    icon
  }
  team {
    __typename
    name
    position
    bio
    image
  }
  contactSectionTitle
  contactSectionDescription
  email
  phone
  address
  officeHours
  socialMedia {
    __typename
    twitter
    linkedin
    instagram
  }
  footerBrandName
  footerTagline
  body
}
    `;
export const PostDocument = gql`
    query post($relativePath: String!) {
  post(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...PostParts
  }
}
    ${PostPartsFragmentDoc}`;
export const PostConnectionDocument = gql`
    query postConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: PostFilter) {
  postConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...PostParts
      }
    }
  }
}
    ${PostPartsFragmentDoc}`;
export const TestimonialDocument = gql`
    query testimonial($relativePath: String!) {
  testimonial(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...TestimonialParts
  }
}
    ${TestimonialPartsFragmentDoc}`;
export const TestimonialConnectionDocument = gql`
    query testimonialConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: TestimonialFilter) {
  testimonialConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...TestimonialParts
      }
    }
  }
}
    ${TestimonialPartsFragmentDoc}`;
export const PageDocument = gql`
    query page($relativePath: String!) {
  page(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...PageParts
  }
}
    ${PagePartsFragmentDoc}`;
export const PageConnectionDocument = gql`
    query pageConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: PageFilter) {
  pageConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...PageParts
      }
    }
  }
}
    ${PagePartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      post(variables: PostQueryVariables, options?: C): Promise<{data: PostQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PostQueryVariables, query: string}> {
        return requester<{data: PostQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PostQueryVariables, query: string}, PostQueryVariables>(PostDocument, variables, options);
      },
    postConnection(variables?: PostConnectionQueryVariables, options?: C): Promise<{data: PostConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PostConnectionQueryVariables, query: string}> {
        return requester<{data: PostConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PostConnectionQueryVariables, query: string}, PostConnectionQueryVariables>(PostConnectionDocument, variables, options);
      },
    testimonial(variables: TestimonialQueryVariables, options?: C): Promise<{data: TestimonialQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: TestimonialQueryVariables, query: string}> {
        return requester<{data: TestimonialQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: TestimonialQueryVariables, query: string}, TestimonialQueryVariables>(TestimonialDocument, variables, options);
      },
    testimonialConnection(variables?: TestimonialConnectionQueryVariables, options?: C): Promise<{data: TestimonialConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: TestimonialConnectionQueryVariables, query: string}> {
        return requester<{data: TestimonialConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: TestimonialConnectionQueryVariables, query: string}, TestimonialConnectionQueryVariables>(TestimonialConnectionDocument, variables, options);
      },
    page(variables: PageQueryVariables, options?: C): Promise<{data: PageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PageQueryVariables, query: string}> {
        return requester<{data: PageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PageQueryVariables, query: string}, PageQueryVariables>(PageDocument, variables, options);
      },
    pageConnection(variables?: PageConnectionQueryVariables, options?: C): Promise<{data: PageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PageConnectionQueryVariables, query: string}> {
        return requester<{data: PageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PageConnectionQueryVariables, query: string}, PageConnectionQueryVariables>(PageConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (
  client: TinaClient,
) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: {
      branch?: string,
      /**
       * Aside from `method` and `body`, all fetch options are passed
       * through to underlying fetch request
       */
      fetchOptions?: Omit<Parameters<typeof fetch>[1], 'body' | 'method'>,
    },
    client
  ) => Promise<any> = async (doc, vars, options) => {
    let url = client.apiUrl
    if (options?.branch) {
      const index = client.apiUrl.lastIndexOf('/')
      url = client.apiUrl.substring(0, index + 1) + options.branch
    }
    const data = await client.request({
      query: doc,
      variables: vars,
      url,
    }, options)

    return { data: data?.data, errors: data?.errors, query: doc, variables: vars || {} }
  }

  return requester
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(
      createClient({
        url: "http://localhost:4001/graphql",
        queries,
      })
    )
  )

export const queries = (
  client: TinaClient,
) => {
  const requester = generateRequester(client)
  return getSdk(requester)
}

  